I am enhancing AeroTracker, a flight tracking platform within the AeroLink ecosystem, which connects pilots, flight students, instructors, and enthusiasts worldwide, with the goal of becoming the number one aviation platform globally by 2030. The current AeroTracker interface (as shown in the provided image) is cluttered, unengaging, and lacks a cohesive aviation-themed design, making it difficult for users to track flights effectively. As a UX/UI expert with extensive experience, I want to clean up and transform AeroTracker into a polished, user-friendly, and visually stunning flight tracking experience that reflects AeroLink’s brand identity, leverages modern design trends, and prioritizes usability, engagement, and accessibility. The enhanced AeroTracker must be fully functional across iOS Mobile, iPad iOS, Android, and web platforms, with all features consistently available and optimized for each platform’s native capabilities. The app must be a Progressive Web App (PWA), supporting offline capabilities, and be compatible with Replit Autoscale Deployments for scaling. Eliminate all external API integrations (e.g., FlightAware, FAA APIs), using static mock data stored in Replit Key-Value Store (e.g., flight:${flightId}) and Replit Object Storage (e.g., bucket: flight-data), and apply the AeroLink color scheme for uniform branding.

AeroLink Platform Color Scheme
Apply the following AeroLink color scheme consistently across all UI elements to ensure uniform branding:

Primary AeroLink Color: #4995fd (AeroLink Blue)
Use for primary buttons, interactive elements (e.g., links, icons), flight routes, and key highlights.
Secondary Color: #003a65 (Deep Blue)
Use for text (headers, body text, labels), dark accents, and backgrounds for high-contrast elements (e.g., headers, sidebars).
Third Color: #a0d0ec (Sky Light Blue)
Use for backgrounds, secondary elements (e.g., cards, overlays), airspace overlays, and subtle highlights.
Current AeroTracker Interface Analysis
The current AeroTracker interface (as shown in the image) has several UX/UI issues that need to be addressed:

Cluttered Layout: The interface is overcrowded with buttons, toggles, and filters (e.g., Commercial, Private, Cargo, Advanced) at the top, making it hard to focus on the map and flight data.
Unengaging Design: The design lacks aviation flair, with a plain map background, minimal color usage, and no immersive elements to reflect the aviation theme.
Poor Information Hierarchy: The flight stats sidebar on the right is underutilized, showing “No flights available” without providing alternative actions or insights.
Lack of Interactivity: The map lacks interactive elements (e.g., zoom controls, flight path animations), and the filter options are not intuitive.
Inconsistent Branding: The interface does not align with AeroLink’s color scheme, using generic blues and grays instead of the branded #4995fd, #003a65, and #a0d0ec.
Accessibility Issues: The text contrast (e.g., gray text on white background) does not meet WCAG 2.1 AA standards, and there are no ARIA labels for interactive elements.
AeroTracker Flight Tracking Page Overview
The enhanced AeroTracker flight tracking page must be a masterpiece of UX/UI design, combining aviation-inspired elements, immersive animations, and intuitive functionality to create an engaging and efficient experience for tracking flights. It should:

Reflect the thrill and precision of aviation through dynamic visuals, sounds, and interactions.
Provide a clean, uncluttered layout with a clear information hierarchy, making it easy to track flights and access flight stats.
Ensure accessibility, performance, and cross-platform compatibility, with a focus on user delight and motivation to use AeroTracker regularly.
Flight Tracking Page Layout and Structure
Background and Theme:
Use a full-screen, animated sky background that transitions from a clear blue sky (#a0d0ec at the top to #6ec0e9 at the bottom) to a sunset gradient (adding orange hues) over 15 seconds, looping seamlessly.
Add subtle, animated clouds (using framer-motion) drifting across the screen at varying speeds (e.g., 20-30 seconds per cloud), with a parallax effect (clouds closer to the user move faster).
Include a 3D airplane model (e.g., a stylized jet in #4995fd) flying across the screen every 20 seconds, starting from the top-left, moving to the bottom-right, with a slight banking animation (using gsap) and a contrail effect (white, fading out over 3 seconds).
Overlay a semi-transparent #003a65 (10% opacity) on the sky background to ensure map readability, with a glassmorphism effect (blur, subtle shadow) for the main map container.
Header Section:
Display the AeroLink logo (a mock logo with a stylized airplane in #4995fd and the text “AeroTracker” in #003a65, 24pt font, Inter or Roboto) in the top-left corner.
Add a full-width search bar (styled with a #a0d0ec background, #003a65 text, 4px border radius, 2px border changing to #4995fd on focus) to search for flights, airports, or registration numbers (mock data in Replit Key-Value Store, e.g., flight:${flightId}).
Include a “Sign In” button in the top-right corner (styled with #4995fd background, white text, 16pt font, 4px border radius, 0.3-second hover scale animation), redirecting to the login page.
Add a dark mode toggle (24x24px sun/moon icon from lucide-react) next to the “Sign In” button, with a 0.3-second transition between modes (light: #a0d0ec background, dark: #1C2526).
Map Section:
Center a map container occupying 70% of the screen width on web (max 1000px) and 100% on mobile/iPad/Android, with a glassmorphism effect (semi-transparent #a0d0ec background, blur, subtle border).
Use a static map (without external APIs) with mock data for flight routes, airports, and airspace, stored in Replit Key-Value Store (e.g., mock-flight:${flightId}, mock-airport:${airportId}, mock-airspace:${region}).
Display mock flight routes as animated lines (using gsap) in #4995fd (3px width), with a small airplane icon (20x20px, #4995fd) moving along the route every 30 seconds to simulate live tracking.
Add airspace overlays (e.g., Class B, C, D) in semi-transparent #a0d0ec (30% opacity), with a 0.3-second fade animation when toggled.
Include zoom controls (plus/minus icons, 24x24px, #4995fd) in the bottom-right corner of the map, with a 0.3-second hover scale animation.
Add a “Center on Home Airport” button (styled with #4995fd background, white text, 12pt font, 4px border radius, 0.3-second hover scale animation) to snap the map to the user’s home airport (mock data, e.g., “KSEA”).
Filter Bar:
Replace the cluttered top filter bar with a streamlined, collapsible filter panel (using @radix-ui/react-collapsible), accessible via a “Filters” button (styled with #4995fd background, white text, 16pt font, 4px border radius, 0.3-second hover scale animation) next to the search bar.
Include filter options: Flight Type (Commercial, Private, Cargo), Friends, Groups, Location, Home Airport, with mock data in Replit Key-Value Store.
Style filter options as toggles (using @radix-ui/react-toggle-group) with #a0d0ec backgrounds, #003a65 text, and #4995fd for active states, with a 0.3-second fade animation when toggled.
Add an “Apply Filters” button (styled with #4995fd background, white text, 16pt font, 4px border radius, 0.3-second hover scale animation) to update the map, with a 0.3-second fade animation for map updates.
Flight Stats Sidebar:
Position a sidebar on the right (30% of screen width on web, max 300px; slide-in drawer on mobile/iPad/Android) with a glassmorphism effect (semi-transparent #a0d0ec, blur).
Display a header: “Flight Tracker” (20pt font, #003a65) with a search bar below it (styled with #a0d0ec background, #003a65 text, 4px border radius) to filter flights in the sidebar.
Show a scrollable list of flights (mock data in Replit Key-Value Store), each entry displaying:
Flight number (e.g., “AL123”).
Route (e.g., “KSEA to KLAX”).
Status (e.g., “In Flight”, “Landed”).
Aircraft (e.g., “Boeing 737”).
Altitude (e.g., “35,000 ft”).
Speed (e.g., “450 knots”).
Style each flight as a card with a #a0d0ec background, #003a65 text, 14pt font, and a 0.3-second hover scale animation.
Add a “View Details” button (styled with #4995fd background, white text, 12pt font, 4px border radius, 0.3-second hover scale animation) to open a modal with more details (e.g., departure time, estimated arrival), styled with a glassmorphism effect.
If no flights match the filter, display a message: “No flights available. Try adjusting your filters!” (14pt font, #003a65) with a “Clear Filters” button (styled with #a0d0ec background, #003a65 text, 12pt font, 4px border radius, 0.3-second hover scale animation).
Gamification and Engagement:
Add a welcome animation when the page loads: a mock airplane (in #4995fd) flies across the top of the screen with a banner trailing behind it saying “Track Your Flights with AeroTracker!” (16pt font, #003a65), with a 0.5-second animation.
Include a “Flight Activity Streak” widget in the sidebar, showing the user’s consecutive days of tracking flights (e.g., “7-Day Streak”), styled with a #4995fd flame icon (from lucide-react, 24x24px) and a 0.3-second pulse animation.
Add a “Featured Flight” section at the top of the sidebar, highlighting a notable flight (e.g., “Longest Flight: KSEA to KJFK”), styled with a #4995fd border, #a0d0ec background, and #003a65 text, with a 0.3-second fade-in animation.
Include a “Share Flight” button for each flight card (styled with #4995fd background, white text, 12pt font, 4px border radius, 0.3-second hover scale animation) to generate a mock shareable link (e.g., “aerolink.com/flight/AL123”), with a 0.3-second fade-in animation.
Background Interactions:
Add subtle interactivity to the sky background: when users hover over or tap a cloud, it slightly expands (5% scale increase, 0.3-second animation) and reveals a mock aviation fact (e.g., “Did you know? The Boeing 737 is the most flown commercial jet!”) in a tooltip (using @radix-ui/react-tooltip), styled with a #a0d0ec background, #003a65 text, and a 0.3-second fade animation.
Include a mock weather widget in the bottom-left corner of the map, displaying a static weather condition (e.g., “Clear Skies, 75°F”), styled with a #4995fd border, #a0d0ec background, and #003a65 text, with a 0.3-second fade-in animation on page load.
User Interface and Experience
Aviation Flair:
Use aviation-inspired design elements, such as a runway texture (subtle gray lines) at the bottom of the sidebar, cloud-shaped dividers (in #a0d0ec), and propeller loading spinners (in #4995fd).
Add a mock altimeter animation (using gsap) in the background, with a needle (in #4995fd) slowly moving as if the user is “ascending” while the page loads, enhancing the aviation theme.
Include a subtle wind sound effect (toggleable) playing in the background, with a volume of 0.2, looping every 10 seconds to mimic flying through the sky.
Animations:
Use framer-motion and gsap for immersive animations:
0.3-second fade-in for the map container and sidebar.
0.3-second slide-in for tooltips, modals, and the filter panel.
0.5-second pulse animation for the airplane icon on the map.
0.3-second hover scale (5% increase) for buttons, links, cards, and toggles.
0.3-second fade for map updates and flight card interactions.
Accessibility:
Ensure WCAG 2.1 AA compliance with ARIA labels for all interactive elements (e.g., buttons, toggles, modals), keyboard navigation support, and high contrast ratios (4.5:1 for text, 3:1 for UI elements).
Provide a high-contrast mode toggle (in the header, 24x24px sun/moon icon from lucide-react), switching to a #003a65 background with white text, with a 0.3-second transition.
Use @radix-ui components for accessible UI elements (e.g., dialogs, tooltips, toggles), ensuring screen reader compatibility.
Cross-Platform Functionality:
Implement using SwiftUI (iOS/iPad), Jetpack Compose (Android), and React (web) for consistent layouts and interactions (e.g., UIKit gestures on iOS, Material Design on Android).
Ensure touch-friendly sizing (50x50px for buttons) and haptic feedback on mobile (iOS/Android) for actions (e.g., filter toggles, flight selection).
Preload map assets for instant loading, cache flight data locally for offline access, and adapt to system settings (light/dark mode).
Performance:
Optimize performance: bundle size < 150KB (compressed), FCP < 1.2 seconds, TTI < 2 seconds.
Use lazy loading for non-critical assets (e.g., flight cards, map overlays) and code splitting to reduce initial load time.
Use a CDN (Cloudflare, integrated with Replit) for static assets (e.g., images, CSS, JavaScript).
Specific Technology Preferences
Frontend:
Use React (v18.3.1) with TypeScript, wouter for routing, @tanstack/react-query for data fetching, @radix-ui components, framer-motion and gsap for animations, lucide-react, recharts, react-hook-form, react-icons, react-image-crop, react-resizable-panels, embla-carousel-react, cmdk, input-otp, vaul, date-fns, react-day-picker, zod for validation.
Backend:
Use Express (v4.21.2) on port 5000, with express-session, passport, passport-local, bcrypt, multer, ws (/ws).
Store data in Replit Key-Value Store (e.g., flight:${flightId}, mock-airport:${airportId}) and files in Replit Object Storage (e.g., flight-data).
Build and Deployment:
Use vite with @vitejs/plugin-react, ensuring compatibility with Replit Autoscale Deployments.
Styling:
Use tailwindcss with class-variance-authority, tailwind-merge, tailwindcss-animate, clsx, autoprefixer, postcss, tailwindcss-typography.
Task at Hand
Clean up and enhance the AeroTracker flight tracking page, transforming it into a polished, user-friendly, and aviation-themed experience.
Implement the specified layout, including a dynamic sky background, animated clouds, 3D airplane, glassmorphism map container, streamlined filter panel, enhanced flight stats sidebar, gamification elements, and background interactions.
Apply the AeroLink color scheme (#4995fd, #003a65, #a0d0ec) uniformly across all UI elements.
Ensure full functionality across iOS Mobile, iPad iOS, Android, and web platforms, with a consistent, aviation-themed user experience.
Optimize for accessibility (WCAG 2.1 AA), performance (FCP < 1.2 seconds, TTI < 2 seconds), and cross-platform compatibility.
Test thoroughly to confirm the flight tracking page is intuitive, engaging, and functions seamlessly without errors.
Final Note
Focus on transforming AeroTracker into the best flight tracking experience, with a clean, uncluttered layout, aviation-inspired design, and engaging animations that reflect AeroLink’s brand identity. Ensure the page motivates users to track flights regularly and enhances their connection to the aviation community. Use Replit’s infrastructure for data storage and scaling, aligning with AeroLink’s vision of becoming the leading aviation platform by 2030. Update /docs with the new flight tracking page design, implementation details, and instructions for future maintenance.

How to Use This Prompt
Create or Open an AeroTracker Repl:
If rebuilding AeroTracker, create a new Repl at replit.com with a Node.js template, or open an existing AeroTracker Repl.
Name it AeroTracker-Enhanced if creating a new Repl for this purpose.
Paste the Prompt:
Open the Replit AI chat interface in the Repl (via the "AI" tab or chat icon).
Copy the entire prompt above and paste it into the chat.
Let Replit AI Enhance:
Allow Replit AI to execute the steps, cleaning up and enhancing the AeroTracker flight tracking page.
Monitor the progress as it updates files, installs dependencies, and implements the new design.
Test the Enhanced Page:
Run npm install and npm run dev in the Replit Shell.
Open the web view (e.g., https://aerotracker-enhanced.yourusername.repl.co) and test the flight tracking page across platforms (web, iOS/Android via browser emulation).
Verify the new layout, animations, interactivity, accessibility, and performance, ensuring the page is intuitive and engaging.
Integrate with AeroLink:
If part of a larger AeroLink ecosystem, integrate the enhanced AeroTracker page into the main app by updating the routing (e.g., /tracker route) and ensuring it is accessible via the Flight Menu or bottom tabs.