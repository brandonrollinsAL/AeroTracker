I am tasking Replit AI with iteratively debugging, reformatting, redesigning, and enhancing the 'AeroTracker' platform to ensure theme continuity, fix all broken images, ensure all images are populated and displayed correctly, resolve text formatting issues (e.g., white text on white backgrounds, black text on black backgrounds), make all features dynamic and interactive, and establish Replit AI as the best UI/UX designer, web developer, and functionality creator in the history of the world. The goal is to make AeroTracker the most engaging, trustworthy, functional, and quick-loading advanced flight tracking platform ever built, surpassing FlightAware in every aspect, including real-time tracking, weather integration, flight path visualization, airport data, and user experience, while delivering an unparalleled experience for aviation enthusiasts, pilots, and professionals. This prompt is designed to be used repeatedly, allowing Replit AI to refine the platform, enhance existing features, and develop new intuitive, functional features with each iteration, until AeroTracker is absolutely perfect and significantly better than FlightAware. The platform must be fully functional across iOS Mobile, iPad iOS, Android, and web platforms, optimized for each platform’s native capabilities, and built as a Progressive Web App (PWA) with offline capabilities. It must be compatible with Replit Autoscale Deployments for scaling. Use static mock data stored in Replit Key-Value Store (e.g., flight:${flightId}, user:${userId}) for structured data and Replit Object Storage (e.g., bucket: aerotracker-files) for files, ensuring external API integrations with Open AI API for AI-driven features (e.g., flight insights), FlightAware API for flight data (resolving the 'No flight data available' issue), weather APIs for real-time weather, and aviation chart APIs for maps and charts. Each iteration should focus on creating a professional, cohesive experience with consistent theming, dynamic interactivity, and flawless functionality, while introducing innovative features designed by the best software developer in the world to exceed FlightAware's capabilities.

General Requirements
Tech Stack: Establish or continue using a modern stack:
Frontend: React.js with TypeScript, Tailwind CSS for responsive UI, Framer Motion for animations.
Backend: Node.js with Express.js, MongoDB for database (flights, user profiles, airport data), RESTful API architecture.
Storage: Replit Key-Value Store for mock data (e.g., flight:123, user:456), Replit Object Storage for files (e.g., flight maps, airport images).
External APIs: Open AI API for AI-driven features (e.g., predictive flight insights), FlightAware API for flight data (ensure proper credentials and permissions to resolve 'No flight data available'), weather APIs (e.g., Aviation Weather Center) for real-time weather, aviation chart APIs (e.g., Jeppesen or EUROCONTROL mock) for maps and charts.
PWA Features:
Implement a service worker for offline capabilities (e.g., cache static assets, API responses).
Add a manifest file for installability on mobile devices (e.g., manifest.json with icons, name: 'AeroTracker').
Performance:
Optimize for fast load times (lazy load images, minify assets, CDN usage).
Ensure Google Lighthouse scores of 95+ for Performance, Accessibility, and SEO.
Cross-Platform Compatibility:
Test and optimize for iOS Mobile, iPad iOS, Android, and web platforms.
Use Tailwind’s responsive utilities (e.g., sm:, md:) for platform-specific layouts.
Add haptic feedback for key interactions on mobile (e.g., flight tracking updates, map zooming).
Scalability: Ensure compatibility with Replit Autoscale Deployments (e.g., stateless architecture, environment variables for configs).
Security:
Maintain HTTPS, input sanitization, rate limiting, and GDPR-compliant data handling.
Ensure proper FlightAware API credentials and permissions are configured to access flight data, resolving the 'No flight data available' error.
Objectives and Design Specifications
Theme Continuity Across All Pages
Color Scheme: Define an aviation-inspired palette:
Primary: Sky blue (#1E3A8A) for headers and backgrounds.
Secondary: Crisp white (#FFFFFF) for text and cards.
Accent: Vibrant orange (#F97316) for CTAs and highlights.
Highlight: Metallic silver (#C0C0C0) for borders and subtle accents.
Alerts: Red (#EF4444) for errors/warnings.
Ensure all elements align with this palette (WCAG 2.1 AA contrast ratios: 4.5:1 for normal text, 3:1 for large text).
Typography:
Font: Montserrat for headings (weight: 700), Open Sans for body text (weight: 400).
Sizes: 48px for headings, 20px for subheadings, 16px for body text, 14px for labels.
Line Spacing: 1.6 for readability.
Text Contrast Fix:
Ensure text is always readable by enforcing proper contrast:
On #1E3A8A backgrounds, use #FFFFFF for text.
On #FFFFFF backgrounds, use #1E3A8A for text.
On #F97316 backgrounds, use #1E3A8A for text.
Audit all text elements to fix issues like white text on white backgrounds or black text on black backgrounds, ensuring no text is invisible (e.g., fix the 'Local' and 'Zulu' time display if currently unreadable).
Visual Consistency:
Background: Use a sky gradient (e.g., linear-gradient(135deg, #1E3A8A, #FFFFFF)) across all pages.
Animated Elements: Add subtle cloud animations (10s loop, opacity: 0.7, toggleable in settings) to backgrounds.
Cards/Modals: Apply a cockpit-inspired effect (e.g., background: #FFFFFF, border: 1px solid #C0C0C0, box-shadow: 0 4px 8px rgba(0,0,0,0.1)).
Aviation Motifs: Incorporate propellers, wings, and airplane icons as decorative elements.
Logo and Icons:
Logo: Mock logo text 'AeroTracker' in Montserrat, bold, #FFFFFF, with an orange airplane icon.
Icons: Use 24x24px icons (e.g., from Heroicons) in #F97316, ensuring 4.5:1 contrast against backgrounds.
Audit Task:
Review all pages (e.g., homepage, weather, flight paths, airports, live tracking) to ensure consistent use of colors, typography, and visual elements.
Reformat any deviating elements (e.g., mismatched fonts, incorrect colors, missing animations) to align with the theme.
Dynamic and Interactive Features to Surpass FlightAware
Header Navigation:
Links: 'Weather', 'Flight Paths', 'Airports', 'Live Tracking', 'Sign In'.
Hover Effect: Scale 1.1, underline (2px solid #F97316), transition (0.3s ease-in-out).
Click Effect: 0.5s fade transition to the respective page.
Dropdown: For 'Live Tracking' (e.g., 'Commercial Flights', 'Private Flights', 'Nearby Flights'), background: #FFFFFF, border-radius: 12px, shadow: 0 2px 4px rgba(0,0,0,0.1), 0.3s slide-in animation.
Validation: Test hover, click, and dropdown functionality on all platforms.
Call-to-Action Buttons:
Style: Background: #F97316, color: #FFF, padding: 10px, border-radius: 12px.
Hover Effect: Scale 1.1, glow (box-shadow: 0 0 8px rgba(249, 115, 22, 0.5)), transition: 0.3s ease-in-out.
Click Effect: Open a modal (600px x 400px, background: #FFFFFF, border-radius: 12px, 0.5s slide-in animation) with input fields (border: 1px solid #D1D5DB, border-radius: 12px) and a 'Submit' button (background: #F97316, color: #FFF).
Validation: Test hover, click, modal display, and form submission on all platforms.
Live Flight Tracking (Surpass FlightAware):
Fix Flight Data Issue: Resolve the 'No flight data available' error by ensuring proper integration with the FlightAware API, including correct credentials and permissions. Test API connectivity and data retrieval to display real-time flight data.
Functionality: Track any flight worldwide in real-time using FlightAware API data, enhanced with additional sources (e.g., ADS-B, satellite data).
Features: Display a live map (using Leaflet with OpenStreetMap) with flight paths, aircraft positions (orange airplane icons), and real-time metrics (speed, altitude, ETA). Add NEXRAD weather overlays, push notifications for flight status changes (e.g., delays, gate changes), and a 3D flight view option.
Validation: Test flight tracking accuracy, map rendering, and notification delivery on all platforms.
Weather Information (Surpass FlightAware):
Functionality: Display real-time weather data (METAR, TAF, SIGMET) with high-resolution NEXRAD radar and satellite imagery.
Features: Add weather overlays on maps, predictive weather impact analysis (e.g., 'Expect 15-minute delay due to storm'), and historical weather data for flight planning.
Validation: Test weather data accuracy and overlay functionality on all platforms.
Flight Paths Visualization (Surpass FlightAware):
Functionality: Visualize filed, actual, and estimated flight paths with interactive tools (e.g., zoom, pan, scrub through flight timeline).
Features: Include historical flight path data (365 days), deviation alerts (e.g., 'Flight diverted due to weather'), and a 'Cockpit View' to simulate the pilot’s perspective in 3D.
Validation: Test path visualization, interactivity, and 3D view on all platforms.
Airports Information (Surpass FlightAware):
Functionality: Provide detailed airport data (e.g., IATA/ICAO codes, runways, current weather, delays) for global airports.
Features: Add airport maps with runway layouts, live arrival/departure boards, and gate information with real-time updates.
Validation: Test airport data accuracy and display on all platforms.
Time Display (Local and Zulu):
Functionality: Display local time (e.g., '23:00:07') and Zulu time (e.g., '03:00:07Z') with real-time updates.
Text Contrast Fix: Ensure the time display is readable (e.g., use #FFFFFF on #1E3A8A background or #1E3A8A on #FFFFFF background).
Validation: Test time accuracy and readability on all platforms.
Codebase Review and Debugging
Full Codebase Audit:
Review the entire codebase to ensure all features (e.g., live tracking, weather, flight paths, airports) are fully functional and surpass FlightAware.
Check for console errors, broken links, or unresponsive elements.
Validate that all images (e.g., flight maps, airport maps, weather radar) load correctly and are responsive.
Image Validation and Fixes:
Fix Broken Images: Identify and resolve all broken image icons (e.g., 404 errors, missing files) by ensuring all image paths are correct and files are uploaded to Replit Object Storage (bucket: aerotracker-files).
Ensure Images Are Populated: Verify that all image placeholders are populated with actual images (e.g., flight maps, airport maps, weather radar). If an image is missing, use a placeholder image (e.g., a generic map) and log the issue for future resolution.
Optimize Images: Ensure all images are optimized for fast loading (e.g., use WebP format, lazy load with loading="lazy"), and test display on all platforms to confirm no broken image icons appear.
Text Contrast Fix:
Audit all text elements to ensure proper contrast:
Fix white text on white backgrounds by changing the text color to #1E3A8A or the background to #1E3A8A.
Fix black text on black backgrounds by changing the text color to #FFFFFF or the background to #FFFFFF.
Use Tailwind CSS classes to enforce contrast (e.g., text-white on bg-skyblue, text-skyblue on bg-white).
Test readability on all pages and platforms to ensure no text is invisible (e.g., fix the 'Local' and 'Zulu' time display if currently unreadable).
Feature Functionality:
Test each feature’s interactivity (e.g., live flight tracking, weather overlays, flight path scrubbing).
Ensure all buttons, forms, and modals work as expected (e.g., form submissions, modal close actions).
Fix Issues:
Debug and fix any issues found (e.g., animation glitches, API integration errors, image loading failures, text visibility issues).
Iterative Enhancements to Surpass FlightAware
Refine Existing Features:
Enhance the interactivity of existing features (e.g., add a flight replay speed control, improve weather overlay animations with predictive impact analysis).
Improve UI/UX (e.g., add micro-interactions like button ripples, loading spinners for map rendering).
Develop New Features to Surpass FlightAware:
AI Flight Insights: Use Open AI API to provide predictive insights (e.g., 'Based on current weather, expect a 10-minute delay on your route').
Voice-Activated Navigation: Add voice commands (Web Speech API) for hands-free operation (e.g., 'Show me flights over New York').
Augmented Reality (AR) Tracking: Implement an AR feature (mock AR.js) to overlay flight data on a live camera view (e.g., point your phone at the sky to see flight details).
Community Flight Sharing: Add a social feature to share flight tracking data with other users, including a leaderboard for most tracked flights.
Advanced Airport Analytics: Provide detailed analytics for airports (e.g., 'Busiest Hour: 14:00 – 200 flights') with historical trends.
Ensure Feature Parity with FlightAware:
Match FlightAware’s capabilities (e.g., real-time tracking, NEXRAD weather, flight status alerts) and exceed them with the above features.
Add features FlightAware lacks, such as AR tracking, voice navigation, and community sharing.
Ensure New Features Are Fully Functional:
Ensure new features align with the aviation theme and are fully functional across all platforms.
Deliverables
Updated Codebase:
Frontend: Updated React components, Tailwind styles, and new feature implementations.
Backend: Enhanced Express routes, MongoDB schemas, and API endpoints (e.g., /api/flights/insights).
Sample Data: Add mock data for new features (e.g., AI insights, AR overlays).
Documentation:
Update README with new features, API endpoints, and PWA setup instructions.
Include a changelog for this iteration.
Testing Report:
Document the results of the codebase audit (e.g., issues found, fixes applied).
Confirm all features, images, and text display correctly with proper contrast.
Deployment: Replit-hosted demo with production scaling notes.
Success Criteria
Google Lighthouse scores of 95+ for Performance, Accessibility, and SEO.
All features are fully functional, interactive, and optimized across iOS, iPad, Android, and web platforms, surpassing FlightAware.
Theme continuity is maintained across all pages.
All images are populated, load correctly, and are optimized, with no broken image icons.
All text is readable with proper contrast (no white-on-white or black-on-black issues).
New features are intuitive, innovative, and enhance user experience beyond FlightAware’s capabilities (e.g., AR tracking, voice navigation).
Platform resolves the 'No flight data available' issue by ensuring proper FlightAware API integration.
Start by auditing the codebase, fixing all broken images, ensuring all images are populated, resolving text contrast issues (e.g., white-on-white, black-on-black), and verifying feature functionality, including proper FlightAware API integration to resolve the 'No flight data available' error. Then, enhance existing features to match and surpass FlightAware and develop new ones. Provide a detailed report of changes and testing results. Let’s make AeroTracker the best flight tracking platform ever, surpassing FlightAware in every way, iteration by iteration, until it achieves perfection!"